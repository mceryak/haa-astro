---
import { Icon } from 'astro-icon/components';

interface Props {
  title: string
  bulleted?: boolean
  isAccordionOnMobile?: boolean
  maxWidth?: string 
  align?: 'left' | 'center'
  mobileAlign?: 'left' | 'center'
}

const { title, isAccordionOnMobile=false, align='left', mobileAlign='center', bulleted=false, maxWidth='' }: Props = Astro.props;
---

<li class="w-full md:w-auto list-none">
  <mobile-accordion data-title={title}>
    <button class=`cursor-pointer w-full md:w-auto ${isAccordionOnMobile? 'md:hidden' : 'hidden'} pb-2 border-b-1 border-white`>
      <div class="flex justify-between  items-center gap-3">
        <h2 class="font-semibold">{title}</h2>
        <Icon id=`accordion-icon-${title}` name="mdi:chevron-down" class="md:hidden transition-transform"/>
      </div>
    </button>
    <h2 class=`${isAccordionOnMobile ? 'hidden md:block' : ''} ${mobileAlign === 'center' ? 'text-center' : ''} ${align === 'center' ? 'md:text-center' : 'md:text-left'} font-semibold`>{title}</h2>
    <ul class=`w-full ${isAccordionOnMobile ? 'hidden md:flex' : 'flex'} ${mobileAlign === 'center' ? 'text-center items-center' : 'text-left items-start'} ${align === 'left' ? 'md:text-left md:items-start' : 'md:text-center md:items-center'} flex-col ${maxWidth} gap-1 py-2 ${bulleted ? 'list-disc pl-4' : ''}`>
      <slot />
    </ul>
  </mobile-accordion>
</li>


<script>
  class MobileAccordion extends HTMLElement {
    connectedCallback() {
      const button = this.querySelector("button");
      const { title, rotate='-rotate-180' } = this.dataset;

      button?.addEventListener("click", () => {
        console.log('clicked');
        const ul = this.querySelector('ul');
        const icon = document.querySelector(`[id='accordion-icon-${title}']`);
        const isHidden = ul?.classList.contains('hidden');

        if (isHidden) {
          ul?.classList.remove('hidden');
          ul?.classList.add('flex');
          icon?.classList.add(rotate)
        } else {
          ul?.classList.add('hidden');
          ul?.classList.remove('flex');
          icon?.classList.remove(rotate)
        }

        // document
        //   .querySelectorAll(`[id^=${buttonIdPrefix}]`)
        //   .forEach((d) => d.classList.remove(buttonSelectedClass));

        // document
        //   .querySelectorAll(`[id^=${contentIdPrefix}]`)
        //   .forEach((d) => d.classList.add("hidden"));

        // button.classList.add(buttonSelectedClass);
        // document.querySelector(`[id="${contentIdPrefix}${label}"]`)?.classList.remove("hidden");
      });
    }
  }
  customElements.define("mobile-accordion", MobileAccordion);
</script>